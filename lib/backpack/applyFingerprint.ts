import { editModes, GitProject, guid, MappedParameter, MappedParameters, Parameter, Parameters } from "@atomist/automation-client";
import { CodeTransform, CodeTransformRegistration } from "@atomist/sdm";
import { SlackMessage } from "@atomist/slack-messages";
import * as goals from "../../fingerprints/index";
import { queryPreferences } from "../adhoc/preferences";
import { footer } from "../support/util";

@Parameters()
export class ApplyTargetFingerprintParameters {

    @Parameter({ required: false, displayable: false })
    public msgId?: string;

    @MappedParameter(MappedParameters.GitHubOwner)
    public owner: string;

    @MappedParameter(MappedParameters.GitHubRepository)
    public repo: string;

    @MappedParameter(MappedParameters.GitHubRepositoryProvider)
    public providerId: string;

    @Parameter({ required: true })
    public fingerprint: string;
}

function confirmUpdate(): CodeTransform<ApplyTargetFingerprintParameters> {
    return async (p, cli) => {
        // await cli.addressChannels(`make an edit to the project in ${(p as GitProject).baseDir} to go to version ${cli.parameters.version}`);
        goals.applyFingerprint((p as GitProject).baseDir, queryPreferences(cli.context.graphClient), cli.parameters.fingerprint);
        const message: SlackMessage = {
            attachments: [
                {
                    author_name: "Apply target fingerprint",
                    author_icon: `https://images.atomist.com/rug/check-circle.gif?gif=${guid()}`,
                    text: `Applying target fingerprint \`${cli.parameters.fingerprint}\` to <https://github.com/${
                        cli.parameters.owner}/${cli.parameters.repo}|${cli.parameters.owner}/${cli.parameters.repo}>`,
                    mrkdwn_in: ["text"],
                    color: "#45B254",
                    fallback: "none",
                    footer: footer(),
                },
            ],
        };
        await cli.addressChannels(message);
        return p;
    };
}

export const ApplyTargetFingerprint: CodeTransformRegistration<ApplyTargetFingerprintParameters> =
{
    name: "ApplyTargetFingerprint",
    description: "choose to raise a PR on the current project to apply a target fingerprint",
    paramsMaker: ApplyTargetFingerprintParameters,
    transformPresentation: ci => {
        const pr = new editModes.PullRequest(
            `apply-target-fingerprint-${Date.now()}`,
            `Apply fingerprint ${ci.parameters.fingerprint} to project`,
            "Nudge generated by Atomist");
        (pr as any).autoMerge = {
            mode: editModes.AutoMergeMode.SuccessfulCheck,
        };
        return pr;
    },
    transform: confirmUpdate(),
};
