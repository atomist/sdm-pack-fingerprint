/*
 * Copyright Â© 2018 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
    Configuration,
    editModes,
    GitProject,
    HandlerContext,
    logger,
} from "@atomist/automation-client";
import {
    Fingerprint,
    goals,
    Goals,
    GoalWithFulfillment,
    pushTest,
    PushTest,
    SoftwareDeliveryMachine,
    SoftwareDeliveryMachineConfiguration,
    whenPushSatisfies,
} from "@atomist/sdm";
import {
    configureSdm,
    createSoftwareDeliveryMachine,
} from "@atomist/sdm-core";
import {
    applyFingerprint,
    checkLibraryImpactHandler,
    depsFingerprints,
    Diff,
    fingerprintImpactHandler,
    fingerprintSupport,
    FP,
    logbackFingerprints,
    messageMaker,
    renderData,
    renderDiffSnippet,
    setNewTarget,
    simpleImpactHandler,
} from "..";
import { applyBackpackFingerprint, backpackFingerprint } from "../lib/fingerprints/backpack";
import { applyDockerBaseFingerprint, dockerBaseFingerprint } from "../lib/fingerprints/dockerFrom";

const IsNpm: PushTest = pushTest(`contains package.json file`, async pci =>
    !!(await pci.project.getFile("package.json")),
);

const backpackComplianceGoal = new GoalWithFulfillment(
    {
        uniqueName: "backpack-react-script-compliance",
        displayName: "backpack-compliance",
    },
).with(
    {
        name: "backpack-react-waiting",
    },
);

export const FingerprintGoal = new Fingerprint();
const FingerprintingGoals: Goals = goals("check fingerprints")
    .plan(FingerprintGoal, backpackComplianceGoal);

async function npmDepUpdated(ctx: HandlerContext, diff: Diff): Promise<any> {
    return setNewTarget(
        ctx,
        diff.to.name,
        diff.to.data.name,
        diff.to.data.version,
        diff.channel);
}

export function machineMaker(config: SoftwareDeliveryMachineConfiguration): SoftwareDeliveryMachine {

    const sdm = createSoftwareDeliveryMachine(
        {
            name: `${configuration.name}-test`,
            configuration: config,
        },
        whenPushSatisfies(IsNpm)
            .itMeans("fingerprint an npm project")
            .setGoals(FingerprintingGoals),
    );

    sdm.addExtensionPacks(
        fingerprintSupport(
            FingerprintGoal,
            async (p: GitProject) => {
                const fps = [].concat(
                    await depsFingerprints(p.baseDir),
                ).concat(
                    await logbackFingerprints(p.baseDir),
                );
                const dockerBaseFP = await dockerBaseFingerprint(p);
                if (dockerBaseFP) {
                    fps.push(dockerBaseFP);
                }
                const backpackFP = await backpackFingerprint(p);
                if (backpackFP) {
                    fps.push(backpackFP);
                }
                logger.info(renderData(fps));
                return fps;
            },
            simpleImpactHandler( renderDiffSnippet, "npm-project-deps"),
            simpleImpactHandler( npmDepUpdated, "npm-project-coordinates"),
            fingerprintImpactHandler(
                {
                    transform: async (p: GitProject, fp: FP) => {

                        if ("backpack-react-scripts" === fp.name) {
                            return applyBackpackFingerprint(p, fp);
                        }

                        if ("docker-base-image" === fp.name) {
                            return applyDockerBaseFingerprint(p, fp);
                        } else {
                            return applyFingerprint(p.baseDir, fp);
                        }
                    },
                    complianceGoal: backpackComplianceGoal,
                    transformPresentation: ci => {
                        return new editModes.PullRequest(
                            `apply-target-fingerprint-${Date.now()}`,
                            `Apply fingerprint ${ci.parameters.fingerprint} to project`,
                            "Nudge generated by Atomist");
                    },
                    messageMaker,
                    messageIdMaker: (fp, diff) => null,
                },
                "backpack-react-scripts"),
            checkLibraryImpactHandler(),
        ),
    );

    return sdm;
}

export const configuration: Configuration = {
    postProcessors: [
        configureSdm(machineMaker),
    ],
};
